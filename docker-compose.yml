version: '3.9'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: next-frontend
    env_file:
      - ./.env
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - '${FRONTEND_PORT}:${FRONTEND_PORT}'
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: nest-backend
    env_file:
      - ./.env
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
      NODE_ENV: ${NODE_ENV}
      COOKIE_DOMAIN: ${COOKIE_DOMAIN}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TOKEN_TTL: ${JWT_ACCESS_TOKEN_TTL}
      JWT_REFRESH_TOKEN_TTL: ${JWT_REFRESH_TOKEN_TTL}
      STORAGE_ACCESS_KEY: ${STORAGE_ACCESS_KEY}
      STORAGE_SECRET_KEY: ${STORAGE_SECRET_KEY}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # postgres:
  #   image: postgres:latest
  #   container_name: postgres-db
  #   restart: always
  #   env_file:
  #     - ./.env
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - '${POSTGRES_PORT}:${POSTGRES_PORT}'
  #   networks:
  #     - app-network

  # minio:
  #   image: minio/minio
  #   container_name: minio
  #   command: server /data --console-address ":9001" --address ":9000"
  #   env_file:
  #     - ./.env
  #   environment:
  #     MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
  #     MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
  #   volumes:
  #     - minio_data:/data
  #   ports:
  #     - '9000:9000' # S3 API
  #     - '9001:9001' # Web UI
  #   networks:
  #     - app-network

  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx-proxy
  #   ports:
  #     - "80:80" 
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - app-network

  # redis:
  #   image: redis:7
  #   container_name: redis
  #   env_file:
  #     - ./.env
  #   volumes:
  #     - redis_data:/data
  #   ports:
  #     - '6379:6379'
  #   networks:
  #     - app-network

  # nginx:
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   container_name: nginx-proxy
  #   ports:
  #     - '80:80'
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   ports:
  #     - '9090:9090'
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - '3001:3000'  # Изменён порт, чтобы не конфликтовал с фронтендом
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./monitoring/datasources:/etc/grafana/provisioning/datasources
  #   environment:
  #     GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
  #     GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-admin}
  #     GF_USERS_DEFAULT_THEME: light
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # node-exporter:
  #   image: prom/node-exporter
  #   container_name: node-exporter
  #   ports:
  #     - '9100:9100'
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor
  #   container_name: cadvisor
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - '8080:8080'
  #   networks:
  #     - app-network
  #   restart: unless-stopped


volumes:
  postgres_data:
  minio_data:
  # prometheus_data:
  # grafana_data:
  # redis_data:

networks:
  app-network:
    driver: bridge
